{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport api from '../config/tmdb-api.json';\nimport { postWithBody } from './ApiRequest';\n\nfunction createRequestToken() {\n  return _createRequestToken.apply(this, arguments);\n}\n\nfunction _createRequestToken() {\n  _createRequestToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var requestToken;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return postWithBody({\n              url: \"https://api.themoviedb.org/4/auth/request_token?api_key=cbdc69d1fd1a96c48e45fa67e4180d07\",\n              method: 'POST',\n              authorization: \"\".concat(api.api_bearer),\n              redirect_url: \"http://localhost:3000/auth/auth-success\"\n            });\n\n          case 3:\n            requestToken = _context.sent;\n            return _context.abrupt(\"return\", requestToken);\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            throw _context.t0;\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n  return _createRequestToken.apply(this, arguments);\n}\n\nfunction createAccessToken(_x) {\n  return _createAccessToken.apply(this, arguments);\n}\n\nfunction _createAccessToken() {\n  _createAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(requestToken) {\n    var accessToken;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return postWithBody({\n              url: api.access_token,\n              method: 'POST',\n              authorization: \"\".concat(api.api_bearer),\n              request_token: requestToken\n            });\n\n          case 3:\n            accessToken = _context2.sent;\n            return _context2.abrupt(\"return\", accessToken);\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            throw _context2.t0;\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 7]]);\n  }));\n  return _createAccessToken.apply(this, arguments);\n}\n\nfunction createSessionId(_x2) {\n  return _createSessionId.apply(this, arguments);\n}\n\nfunction _createSessionId() {\n  _createSessionId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(access_token) {\n    var sessionId;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return postWithBody({\n              url: api.session_id,\n              method: 'POST',\n              access_token: access_token\n            });\n\n          case 3:\n            sessionId = _context3.sent;\n            return _context3.abrupt(\"return\", sessionId);\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](0);\n            throw _context3.t0;\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 7]]);\n  }));\n  return _createSessionId.apply(this, arguments);\n}\n\nexport { createRequestToken, createAccessToken, createSessionId };","map":{"version":3,"sources":["/home/mihajlot/movie-app-test/services/auth-service.js"],"names":["api","postWithBody","createRequestToken","url","method","authorization","api_bearer","redirect_url","requestToken","createAccessToken","access_token","request_token","accessToken","createSessionId","session_id","sessionId"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,yBAAhB;AACA,SAASC,YAAT,QAA6B,cAA7B;;SAEeC,kB;;;;;iFAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEmCD,YAAY,CAAC;AACpCE,cAAAA,GAAG,EAAE,0FAD+B;AAEpCC,cAAAA,MAAM,EAAE,MAF4B;AAGpCC,cAAAA,aAAa,YAAKL,GAAG,CAACM,UAAT,CAHuB;AAIpCC,cAAAA,YAAY,EAAE;AAJsB,aAAD,CAF/C;;AAAA;AAEcC,YAAAA,YAFd;AAAA,6CAQeA,YARf;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAceC,iB;;;;;gFAAf,kBAAiCD,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEkCP,YAAY,CAAC;AACnCE,cAAAA,GAAG,EAAEH,GAAG,CAACU,YAD0B;AAEnCN,cAAAA,MAAM,EAAE,MAF2B;AAGnCC,cAAAA,aAAa,YAAKL,GAAG,CAACM,UAAT,CAHsB;AAInCK,cAAAA,aAAa,EAAEH;AAJoB,aAAD,CAF9C;;AAAA;AAEcI,YAAAA,WAFd;AAAA,8CAQeA,WARf;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAceC,e;;;;;8EAAf,kBAA+BH,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEgCT,YAAY,CAAC;AACjCE,cAAAA,GAAG,EAAEH,GAAG,CAACc,UADwB;AAEjCV,cAAAA,MAAM,EAAE,MAFyB;AAGjCM,cAAAA,YAAY,EAAEA;AAHmB,aAAD,CAF5C;;AAAA;AAEcK,YAAAA,SAFd;AAAA,8CAOeA,SAPf;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaA,SACIb,kBADJ,EAEIO,iBAFJ,EAGII,eAHJ","sourcesContent":["import api from '../config/tmdb-api.json';\nimport { postWithBody } from './ApiRequest';\n\nasync function createRequestToken() {\n    try {\n        const requestToken = await postWithBody({\n            url: \"https://api.themoviedb.org/4/auth/request_token?api_key=cbdc69d1fd1a96c48e45fa67e4180d07\",\n            method: 'POST',\n            authorization: `${api.api_bearer}`,\n            redirect_url: \"http://localhost:3000/auth/auth-success\" \n        })\n        return requestToken;\n    } catch (err) {\n        throw err;\n    }\n}\n\nasync function createAccessToken(requestToken) {\n    try {\n        const accessToken = await postWithBody({\n            url: api.access_token,\n            method: 'POST',\n            authorization: `${api.api_bearer}`,\n            request_token: requestToken\n        })\n        return accessToken;\n    } catch (err) {\n        throw err;\n    }\n}\n\nasync function createSessionId(access_token) {\n    try {\n        const sessionId = await postWithBody({\n            url: api.session_id,\n            method: 'POST',\n            access_token: access_token\n        })\n        return sessionId\n    } catch (err) {\n        throw err;\n    }\n}\n\nexport {\n    createRequestToken,\n    createAccessToken,\n    createSessionId\n};"]},"metadata":{},"sourceType":"module"}