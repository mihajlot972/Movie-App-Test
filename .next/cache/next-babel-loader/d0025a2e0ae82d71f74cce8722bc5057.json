{"ast":null,"code":"import api from '../config/tmdb-api.json';\nimport makeApiRequest, { postWithBody } from './ApiRequest'; // Potentionally could be transformed to factory function\n// for getting Movie data \n\nasync function getPopularMovies(page) {\n  try {\n    const popularMovies = await makeApiRequest({\n      url: api.popular_movies,\n      method: 'GET',\n      page: page\n    });\n    return popularMovies;\n  } catch (err) {\n    throw err;\n  }\n}\n\nasync function getTopRatedMovies(page) {\n  try {\n    const topRatedMovies = await makeApiRequest({\n      url: api.top_rated_movies,\n      method: 'GET',\n      page: page\n    });\n    return topRatedMovies;\n  } catch (err) {\n    throw err;\n  }\n}\n\nasync function getMovieDetails(movieId) {\n  try {\n    const movieDetails = await makeApiRequest({\n      url: api.movie_details + movieId,\n      method: 'GET'\n    });\n    return movieDetails;\n  } catch (err) {\n    throw err;\n  }\n}\n\nasync function getUpcomingMovies(page) {\n  try {\n    const upcomingMovies = await makeApiRequest({\n      url: api.upcoming_movies,\n      method: 'GET',\n      page: page\n    });\n    return upcomingMovies;\n  } catch (err) {\n    throw err;\n  }\n}\n\nasync function searchMovie(searchText) {\n  // Fallback for instant text input removal\n  if (searchText.length === 0) {\n    return {\n      results: []\n    };\n  }\n\n  try {\n    const searchMovies = await makeApiRequest({\n      url: api.search_movies,\n      method: 'GET',\n      query: searchText\n    });\n    return searchMovies;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nasync function getFavoriteMovies(account_id, session_id) {\n  console.log(account_id);\n  console.log(session_id);\n\n  try {\n    const favoriteMovies = await makeApiRequest({\n      url: `${api.favorite_movies}${account_id}/favorite/movies`,\n      method: 'GET',\n      session_id: session_id\n    });\n    return favoriteMovies;\n  } catch (err) {\n    throw err;\n    ;\n  }\n}\n\nasync function markFavoriteMovie(movie_id, account_id, session_id, favorite = true) {\n  try {\n    const addToFavorite = await postWithBody({\n      url: `${api.mark_favorite}${account_id}/favorite`,\n      method: 'POST',\n      media_id: movie_id,\n      favorite: favorite,\n      media_type: 'movie',\n      session_id: session_id\n    });\n    return addToFavorite;\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport { getPopularMovies, getTopRatedMovies, getMovieDetails, getUpcomingMovies, getFavoriteMovies, markFavoriteMovie, searchMovie };","map":{"version":3,"sources":["/home/mihajlot/movie-app-test/services/movie-service.js"],"names":["api","makeApiRequest","postWithBody","getPopularMovies","page","popularMovies","url","popular_movies","method","err","getTopRatedMovies","topRatedMovies","top_rated_movies","getMovieDetails","movieId","movieDetails","movie_details","getUpcomingMovies","upcomingMovies","upcoming_movies","searchMovie","searchText","length","results","searchMovies","search_movies","query","console","log","getFavoriteMovies","account_id","session_id","favoriteMovies","favorite_movies","markFavoriteMovie","movie_id","favorite","addToFavorite","mark_favorite","media_id","media_type"],"mappings":"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","sourcesContent":["import api from '../config/tmdb-api.json';\nimport makeApiRequest, { postWithBody } from './ApiRequest';\n\n// Potentionally could be transformed to factory function\n// for getting Movie data \n\nasync function getPopularMovies(page) {\n    try {\n        const popularMovies = await makeApiRequest({\n            url: api.popular_movies,\n            method: 'GET',\n            page: page,\n        })\n        return popularMovies\n    } catch (err) {\n        throw err;\n    }\n}\n\nasync function getTopRatedMovies(page) {\n    try {\n        const topRatedMovies = await makeApiRequest({\n            url: api.top_rated_movies,\n            method: 'GET',\n            page: page\n        })\n        return topRatedMovies\n    } catch (err) {\n        throw err;\n    }\n}\n\nasync function getMovieDetails(movieId) {\n    try {\n        const movieDetails = await makeApiRequest({\n            url: api.movie_details + movieId,\n            method: 'GET'\n        })\n        return movieDetails\n    } catch (err) {\n        throw err;\n    }\n}\n\nasync function getUpcomingMovies(page) {\n    try {\n        const upcomingMovies = await makeApiRequest({\n            url: api.upcoming_movies,\n            method: 'GET',\n            page: page\n        })\n        return upcomingMovies\n    } catch (err) {\n        throw err;\n    }\n}\n\nasync function searchMovie(searchText) {\n    // Fallback for instant text input removal\n    if (searchText.length === 0) {\n        return {results: []};\n    }\n    try {\n        const searchMovies = await makeApiRequest({\n            url: api.search_movies,\n            method: 'GET',\n            query: searchText\n        });\n        return searchMovies;\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nasync function getFavoriteMovies(account_id, session_id) {\n    console.log(account_id)\n    console.log(session_id)\n    try {\n        const favoriteMovies = await makeApiRequest({\n            url: `${api.favorite_movies}${account_id}/favorite/movies`,\n            method: 'GET',\n            session_id: session_id\n        })\n        return favoriteMovies\n    } catch (err) {\n        throw err;;\n    }\n}\n\nasync function markFavoriteMovie(movie_id, account_id, session_id, favorite=true) {\n    try {\n        const addToFavorite = await postWithBody({\n            url: `${api.mark_favorite}${account_id}/favorite`,\n            method: 'POST',\n            media_id: movie_id,\n            favorite: favorite,\n            media_type: 'movie',\n            session_id: session_id,\n        })\n        return addToFavorite\n    } catch (err) {\n        throw err;\n    }\n}\n\nexport {\n    getPopularMovies,\n    getTopRatedMovies,\n    getMovieDetails,\n    getUpcomingMovies,\n    getFavoriteMovies,\n    markFavoriteMovie,\n    searchMovie\n}"]},"metadata":{},"sourceType":"module"}