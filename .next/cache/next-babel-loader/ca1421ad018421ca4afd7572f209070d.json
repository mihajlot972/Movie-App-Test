{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/mihajlot/movie-app-test/pages/movies/favorite-movies.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Layout from '../../components/Layout/Layout';\nimport EmptyItem from '../../components/EmptyItem/EmptyItem';\nimport MovieCard from '../../components/MovieCard/MovieCard';\nimport { getFavoriteMovies } from '../../services/movie-service';\n\nfunction FavoriteMovies() {\n  _s();\n\n  var _this = this;\n\n  var _isMounted = true;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState([]),\n      currentMovies = _useState2[0],\n      setCurrentMovies = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      favoriteMoviesStatus = _useState3[0],\n      setFavoriteMoviesStatus = _useState3[1];\n\n  useEffect(function () {\n    // TODO: use cookies instead of localstorage \n    var localStorageData = Object.entries(localStorage);\n\n    if (localStorageData.access_token) {\n      fetchFavoriteMovies(localStorageData.account_id, localStorageData.session_id);\n      setFavoriteMoviesStatus(\"Your favorite list is empty.\");\n    } else {\n      setFavoriteMoviesStatus(\"You need to authenticate to be able to add and see favorite movies\");\n    }\n\n    return function () {\n      _isMounted = false;\n    };\n  }, []);\n\n  function fetchFavoriteMovies(_x, _x2) {\n    return _fetchFavoriteMovies.apply(this, arguments);\n  }\n\n  function _fetchFavoriteMovies() {\n    _fetchFavoriteMovies = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(account_id, session_id) {\n      var movies;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return getFavoriteMovies(account_id, session_id);\n\n            case 3:\n              movies = _context.sent;\n              setLoading(false);\n              setCurrentMovies(movies.results);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _fetchFavoriteMovies.apply(this, arguments);\n  }\n\n  ;\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, \"List of Favorite Movies\")), __jsx(\"div\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, loading ? __jsx(EmptyItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 31\n    }\n  }, \"Loading movies from the API...\") : currentMovies.length === 0 ? __jsx(EmptyItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 54\n    }\n  }, favoriteMoviesStatus) : currentMovies.map(function (movie) {\n    return __jsx(MovieCard, {\n      id: movie.id,\n      poster_path: movie.poster_path,\n      title: movie.title,\n      overview: movie.overview,\n      release_date: movie.release_date,\n      vote_average: movie.vote_average,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 36\n      }\n    });\n  })));\n}\n\n_s(FavoriteMovies, \"VP1MukLltFgpqH+IecBZeCJrs84=\");\n\n_c = FavoriteMovies;\nexport default FavoriteMovies;\n\nvar _c;\n\n$RefreshReg$(_c, \"FavoriteMovies\");","map":{"version":3,"sources":["/home/mihajlot/movie-app-test/pages/movies/favorite-movies.jsx"],"names":["React","useState","useEffect","Head","Layout","EmptyItem","MovieCard","getFavoriteMovies","FavoriteMovies","_isMounted","loading","setLoading","currentMovies","setCurrentMovies","favoriteMoviesStatus","setFavoriteMoviesStatus","localStorageData","Object","entries","localStorage","access_token","fetchFavoriteMovies","account_id","session_id","movies","results","color","length","map","movie","id","poster_path","title","overview","release_date","vote_average"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Layout from '../../components/Layout/Layout';\nimport EmptyItem from '../../components/EmptyItem/EmptyItem'\nimport MovieCard from '../../components/MovieCard/MovieCard'\nimport { getFavoriteMovies } from '../../services/movie-service';\n\nfunction FavoriteMovies() {\n    let _isMounted = true;\n    const [loading, setLoading] = useState(false);\n    const [currentMovies, setCurrentMovies] = useState([]);\n    const [favoriteMoviesStatus, setFavoriteMoviesStatus] = useState(\"\");\n\n    useEffect(() => {\n        // TODO: use cookies instead of localstorage \n        let localStorageData = Object.entries(localStorage)\n        if (localStorageData.access_token) {\n            fetchFavoriteMovies(localStorageData.account_id, localStorageData.session_id);\n            setFavoriteMoviesStatus(\"Your favorite list is empty.\")\n        } else {\n            setFavoriteMoviesStatus(\"You need to authenticate to be able to add and see favorite movies\")\n        }\n        return () => {\n            _isMounted = false;\n        }\n    }, [])\n\n    async function fetchFavoriteMovies(account_id, session_id) {\n        setLoading(true);\n        let movies = await getFavoriteMovies(account_id, session_id)\n        setLoading(false);\n        setCurrentMovies(movies.results)\n    };\n\n    return (\n        <Layout>\n            <Head>\n                <title>List of Favorite Movies</title>\n            </Head>\n            <div style={{ color: 'white' }}>\n                {\n                    loading ? <EmptyItem>Loading movies from the API...</EmptyItem> :\n                        currentMovies.length === 0 ? <EmptyItem>{favoriteMoviesStatus}</EmptyItem> : currentMovies.map(movie => {\n                            return <MovieCard\n                                id={movie.id}\n                                poster_path={movie.poster_path}\n                                title={movie.title}\n                                overview={movie.overview}\n                                release_date={movie.release_date}\n                                vote_average={movie.vote_average} />\n                        })\n\n                }\n\n            </div>\n        </Layout>\n    )\n}\n\nexport default FavoriteMovies"]},"metadata":{},"sourceType":"module"}