{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport setDefaults from './helper';\nimport api from '../config/tmdb-api.json';\n/**\n * [Adapter for creating requests in other modules using axios]\n * @return {Promise<data>} returns response promise\n */\n\nfunction makeApiRequest(_x) {\n  return _makeApiRequest.apply(this, arguments);\n} // API giving error if called with data option, thus this as quick fix.\n\n\nfunction _makeApiRequest() {\n  _makeApiRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              // Setting default options if nothing is provided\n              var defaults = {\n                url: \"\".concat(api.popular_movies),\n                method: 'GET',\n                api_key: api.api_key,\n                page: 1,\n                query: undefined,\n                authorization: \"\",\n                request_token: \"\",\n                session_id: \"\"\n              };\n              options = setDefaults(options, defaults); // Making request to the backend\n\n              axios({\n                url: options.url,\n                method: options.method,\n                params: {\n                  api_key: options.api_key,\n                  page: options.page,\n                  query: options.query,\n                  session_id: options.session_id\n                },\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': options.authorization\n                }\n              }).then(function (res) {\n                resolve(res.data);\n              })[\"catch\"](function (err) {\n                reject(err);\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _makeApiRequest.apply(this, arguments);\n}\n\nfunction postWithBody(_x2) {\n  return _postWithBody.apply(this, arguments);\n}\n\nfunction _postWithBody() {\n  _postWithBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              // Setting default options if nothing is provided\n              var defaults = {\n                url: \"\".concat(api.popular_movies),\n                method: 'GET',\n                api_key: api.api_key,\n                page: 1,\n                query: undefined,\n                authorization: \"\",\n                request_token: \"\",\n                redirect_to: \"\",\n                access_token: \"\",\n                media_type: \"\",\n                media_id: \"\",\n                favorite: true,\n                session_id: \"\"\n              };\n              options = setDefaults(options, defaults); // Making request to the backend\n\n              axios({\n                url: options.url,\n                method: options.method,\n                params: {\n                  api_key: options.api_key,\n                  page: options.page,\n                  query: options.query,\n                  session_id: options.session_id\n                },\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': options.authorization\n                },\n                data: {\n                  request_token: options.request_token,\n                  redirect_to: options.redirect_url,\n                  access_token: options.access_token,\n                  media_id: options.media_id,\n                  media_type: options.media_type,\n                  favorite: options.favorite\n                }\n              }).then(function (res) {\n                resolve(res.data);\n              })[\"catch\"](function (err) {\n                reject(err);\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _postWithBody.apply(this, arguments);\n}\n\nexport { postWithBody };\nexport default makeApiRequest;","map":{"version":3,"sources":["/home/mihajlot/movie-app-test/services/ApiRequest.js"],"names":["axios","setDefaults","api","makeApiRequest","options","Promise","resolve","reject","defaults","url","popular_movies","method","api_key","page","query","undefined","authorization","request_token","session_id","params","headers","then","res","data","err","postWithBody","redirect_to","access_token","media_type","media_id","favorite","redirect_url"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,UAAxB;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AAEA;;;;;SAIeC,c;;EAqCf;;;;6EArCA,iBAA8BC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,6CACW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA,kBAAIC,QAAQ,GAAG;AACXC,gBAAAA,GAAG,YAAKP,GAAG,CAACQ,cAAT,CADQ;AAEXC,gBAAAA,MAAM,EAAE,KAFG;AAGXC,gBAAAA,OAAO,EAAEV,GAAG,CAACU,OAHF;AAIXC,gBAAAA,IAAI,EAAE,CAJK;AAKXC,gBAAAA,KAAK,EAAEC,SALI;AAMXC,gBAAAA,aAAa,EAAE,EANJ;AAOXC,gBAAAA,aAAa,EAAE,EAPJ;AAQXC,gBAAAA,UAAU,EAAE;AARD,eAAf;AAUAd,cAAAA,OAAO,GAAGH,WAAW,CAACG,OAAD,EAAUI,QAAV,CAArB,CAZoC,CAapC;;AACAR,cAAAA,KAAK,CAAC;AACES,gBAAAA,GAAG,EAAEL,OAAO,CAACK,GADf;AAEEE,gBAAAA,MAAM,EAAEP,OAAO,CAACO,MAFlB;AAGEQ,gBAAAA,MAAM,EAAE;AACJP,kBAAAA,OAAO,EAAER,OAAO,CAACQ,OADb;AAEJC,kBAAAA,IAAI,EAAET,OAAO,CAACS,IAFV;AAGJC,kBAAAA,KAAK,EAAEV,OAAO,CAACU,KAHX;AAIJI,kBAAAA,UAAU,EAAEd,OAAO,CAACc;AAJhB,iBAHV;AASEE,gBAAAA,OAAO,EAAE;AACL,kCAAgB,kBADX;AAEL,mCAAiBhB,OAAO,CAACY;AAFpB;AATX,eAAD,CAAL,CAcKK,IAdL,CAcU,UAAAC,GAAG,EAAI;AACThB,gBAAAA,OAAO,CAACgB,GAAG,CAACC,IAAL,CAAP;AACH,eAhBL,WAgBa,UAAAC,GAAG,EAAI;AACZjB,gBAAAA,MAAM,CAACiB,GAAD,CAAN;AACH,eAlBL;AAmBH,aAjCM,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAsCeC,Y;;;;;2EAAf,kBAA4BrB,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,8CACW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA,kBAAIC,QAAQ,GAAG;AACXC,gBAAAA,GAAG,YAAKP,GAAG,CAACQ,cAAT,CADQ;AAEXC,gBAAAA,MAAM,EAAE,KAFG;AAGXC,gBAAAA,OAAO,EAAEV,GAAG,CAACU,OAHF;AAIXC,gBAAAA,IAAI,EAAE,CAJK;AAKXC,gBAAAA,KAAK,EAAEC,SALI;AAMXC,gBAAAA,aAAa,EAAE,EANJ;AAOXC,gBAAAA,aAAa,EAAE,EAPJ;AAQXS,gBAAAA,WAAW,EAAE,EARF;AASXC,gBAAAA,YAAY,EAAE,EATH;AAUXC,gBAAAA,UAAU,EAAE,EAVD;AAWXC,gBAAAA,QAAQ,EAAE,EAXC;AAYXC,gBAAAA,QAAQ,EAAE,IAZC;AAaXZ,gBAAAA,UAAU,EAAE;AAbD,eAAf;AAeAd,cAAAA,OAAO,GAAGH,WAAW,CAACG,OAAD,EAAUI,QAAV,CAArB,CAjBoC,CAkBpC;;AACAR,cAAAA,KAAK,CAAC;AACES,gBAAAA,GAAG,EAAEL,OAAO,CAACK,GADf;AAEEE,gBAAAA,MAAM,EAAEP,OAAO,CAACO,MAFlB;AAGEQ,gBAAAA,MAAM,EAAE;AACJP,kBAAAA,OAAO,EAAER,OAAO,CAACQ,OADb;AAEJC,kBAAAA,IAAI,EAAET,OAAO,CAACS,IAFV;AAGJC,kBAAAA,KAAK,EAAEV,OAAO,CAACU,KAHX;AAIJI,kBAAAA,UAAU,EAAEd,OAAO,CAACc;AAJhB,iBAHV;AASEE,gBAAAA,OAAO,EAAE;AACL,kCAAgB,kBADX;AAEL,mCAAiBhB,OAAO,CAACY;AAFpB,iBATX;AAaEO,gBAAAA,IAAI,EAAE;AACFN,kBAAAA,aAAa,EAAEb,OAAO,CAACa,aADrB;AAEFS,kBAAAA,WAAW,EAAEtB,OAAO,CAAC2B,YAFnB;AAGFJ,kBAAAA,YAAY,EAAEvB,OAAO,CAACuB,YAHpB;AAIFE,kBAAAA,QAAQ,EAAEzB,OAAO,CAACyB,QAJhB;AAKFD,kBAAAA,UAAU,EAAExB,OAAO,CAACwB,UALlB;AAMFE,kBAAAA,QAAQ,EAAE1B,OAAO,CAAC0B;AANhB;AAbR,eAAD,CAAL,CAsBKT,IAtBL,CAsBU,UAAAC,GAAG,EAAI;AACThB,gBAAAA,OAAO,CAACgB,GAAG,CAACC,IAAL,CAAP;AACH,eAxBL,WAwBa,UAAAC,GAAG,EAAI;AACZjB,gBAAAA,MAAM,CAACiB,GAAD,CAAN;AACH,eA1BL;AA2BH,aA9CM,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkDA,SAASC,YAAT;AACA,eAAetB,cAAf","sourcesContent":["import axios from 'axios';\nimport setDefaults from './helper';\nimport api from '../config/tmdb-api.json'\n\n/**\n * [Adapter for creating requests in other modules using axios]\n * @return {Promise<data>} returns response promise\n */\nasync function makeApiRequest(options) {\n    return new Promise((resolve, reject) => {\n        // Setting default options if nothing is provided\n        let defaults = {\n            url: `${api.popular_movies}`,\n            method: 'GET',\n            api_key: api.api_key,\n            page: 1,\n            query: undefined,\n            authorization: \"\",\n            request_token: \"\",\n            session_id: \"\",\n        }\n        options = setDefaults(options, defaults);\n        // Making request to the backend\n        axios({\n                url: options.url,\n                method: options.method,\n                params: {\n                    api_key: options.api_key,\n                    page: options.page,\n                    query: options.query,\n                    session_id: options.session_id,\n                },\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': options.authorization\n                },\n            })\n            .then(res => {\n                resolve(res.data);\n            }).catch(err => {\n                reject(err);\n            })\n    });\n}\n\n// API giving error if called with data option, thus this as quick fix.\nasync function postWithBody(options) {\n    return new Promise((resolve, reject) => {\n        // Setting default options if nothing is provided\n        let defaults = {\n            url: `${api.popular_movies}`,\n            method: 'GET',\n            api_key: api.api_key,\n            page: 1,\n            query: undefined,\n            authorization: \"\",\n            request_token: \"\",\n            redirect_to: \"\",\n            access_token: \"\",\n            media_type: \"\",\n            media_id: \"\",\n            favorite: true,\n            session_id: \"\",\n        }\n        options = setDefaults(options, defaults);\n        // Making request to the backend\n        axios({\n                url: options.url,\n                method: options.method,\n                params: {\n                    api_key: options.api_key,\n                    page: options.page,\n                    query: options.query,\n                    session_id: options.session_id,\n                },\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': options.authorization\n                },\n                data: {\n                    request_token: options.request_token,\n                    redirect_to: options.redirect_url,\n                    access_token: options.access_token,\n                    media_id: options.media_id,\n                    media_type: options.media_type,\n                    favorite: options.favorite,\n                }\n            })\n            .then(res => {\n                resolve(res.data);\n            }).catch(err => {\n                reject(err);\n            })\n    });\n}\n\nexport { postWithBody }\nexport default makeApiRequest"]},"metadata":{},"sourceType":"module"}