{"ast":null,"code":"import axios from 'axios';\nimport setDefaults from './helper';\nimport api from '../config/tmdb-api.json';\n/**\n * [Adapter for creating requests in other modules using axios]\n * @return {Promise<data>} returns response promise\n */\n\nasync function makeApiRequest(options) {\n  return new Promise((resolve, reject) => {\n    // Setting default options if nothing is provided\n    let defaults = {\n      url: `${api.popular_movies}`,\n      method: 'GET',\n      api_key: api.api_key,\n      page: 1,\n      query: undefined,\n      authorization: \"\",\n      request_token: \"\",\n      session_id: \"\"\n    };\n    options = setDefaults(options, defaults); // Making request to the backend\n\n    axios({\n      url: options.url,\n      method: options.method,\n      params: {\n        api_key: options.api_key,\n        page: options.page,\n        query: options.query,\n        session_id: options.session_id\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': options.authorization\n      }\n    }).then(res => {\n      resolve(res.data);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n} // API giving error if called with data option, thus this as quick fix.\n\n\nasync function postWithBody(options) {\n  return new Promise((resolve, reject) => {\n    // Setting default options if nothing is provided\n    let defaults = {\n      url: `${api.popular_movies}`,\n      method: 'GET',\n      api_key: api.api_key,\n      page: 1,\n      query: undefined,\n      authorization: \"\",\n      request_token: \"\",\n      redirect_to: \"\",\n      access_token: \"\",\n      media_type: \"\",\n      media_id: \"\",\n      favorite: true,\n      session_id: \"\"\n    };\n    options = setDefaults(options, defaults); // Making request to the backend\n\n    axios({\n      url: options.url,\n      method: options.method,\n      params: {\n        api_key: options.api_key,\n        page: options.page,\n        query: options.query,\n        session_id: options.session_id\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': options.authorization\n      },\n      data: {\n        request_token: options.request_token,\n        redirect_to: options.redirect_url,\n        access_token: options.access_token,\n        media_id: options.media_id,\n        media_type: options.media_type,\n        favorite: options.favorite\n      }\n    }).then(res => {\n      resolve(res.data);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n\nexport { postWithBody };\nexport default makeApiRequest;","map":{"version":3,"sources":["/home/mihajlot/movie-app-test/services/ApiRequest.js"],"names":["axios","setDefaults","api","makeApiRequest","options","Promise","resolve","reject","defaults","url","popular_movies","method","api_key","page","query","undefined","authorization","request_token","session_id","params","headers","then","res","data","catch","err","postWithBody","redirect_to","access_token","media_type","media_id","favorite","redirect_url"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport setDefaults from './helper';\nimport api from '../config/tmdb-api.json'\n\n/**\n * [Adapter for creating requests in other modules using axios]\n * @return {Promise<data>} returns response promise\n */\nasync function makeApiRequest(options) {\n    return new Promise((resolve, reject) => {\n        // Setting default options if nothing is provided\n        let defaults = {\n            url: `${api.popular_movies}`,\n            method: 'GET',\n            api_key: api.api_key,\n            page: 1,\n            query: undefined,\n            authorization: \"\",\n            request_token: \"\",\n            session_id: \"\",\n        }\n        options = setDefaults(options, defaults);\n        // Making request to the backend\n        axios({\n                url: options.url,\n                method: options.method,\n                params: {\n                    api_key: options.api_key,\n                    page: options.page,\n                    query: options.query,\n                    session_id: options.session_id,\n                },\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': options.authorization\n                },\n            })\n            .then(res => {\n                resolve(res.data);\n            }).catch(err => {\n                reject(err);\n            })\n    });\n}\n\n// API giving error if called with data option, thus this as quick fix.\nasync function postWithBody(options) {\n    return new Promise((resolve, reject) => {\n        // Setting default options if nothing is provided\n        let defaults = {\n            url: `${api.popular_movies}`,\n            method: 'GET',\n            api_key: api.api_key,\n            page: 1,\n            query: undefined,\n            authorization: \"\",\n            request_token: \"\",\n            redirect_to: \"\",\n            access_token: \"\",\n            media_type: \"\",\n            media_id: \"\",\n            favorite: true,\n            session_id: \"\",\n        }\n        options = setDefaults(options, defaults);\n        // Making request to the backend\n        axios({\n                url: options.url,\n                method: options.method,\n                params: {\n                    api_key: options.api_key,\n                    page: options.page,\n                    query: options.query,\n                    session_id: options.session_id,\n                },\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': options.authorization\n                },\n                data: {\n                    request_token: options.request_token,\n                    redirect_to: options.redirect_url,\n                    access_token: options.access_token,\n                    media_id: options.media_id,\n                    media_type: options.media_type,\n                    favorite: options.favorite,\n                }\n            })\n            .then(res => {\n                resolve(res.data);\n            }).catch(err => {\n                reject(err);\n            })\n    });\n}\n\nexport { postWithBody }\nexport default makeApiRequest"]},"metadata":{},"sourceType":"module"}