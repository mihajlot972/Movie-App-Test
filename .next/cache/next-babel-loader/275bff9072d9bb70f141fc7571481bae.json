{"ast":null,"code":"var _jsxFileName = \"/home/mihajlot/movie-app-test/pages/movies/favorite-movies.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Layout from '../../components/Layout/Layout';\nimport EmptyItem from '../../components/EmptyItem/EmptyItem';\nimport MovieCard from '../../components/MovieCard/MovieCard';\nimport { getFavoriteMovies } from '../../services/movie-service';\n\nfunction FavoriteMovies() {\n  let _isMounted = true;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: currentMovies,\n    1: setCurrentMovies\n  } = useState([]);\n  const {\n    0: favoriteMoviesStatus,\n    1: setFavoriteMoviesStatus\n  } = useState(\"\");\n  useEffect(() => {\n    // TODO: use cookies instead of localstorage \n    let localStorageData = Object.values(localStorage);\n    console.log(localStorageData);\n\n    if (localStorageData.access_token) {\n      fetchFavoriteMovies(localStorageData.account_id, localStorageData.session_id);\n      setFavoriteMoviesStatus(\"Your favorite list is empty.\");\n    } else {\n      setFavoriteMoviesStatus(\"You need to authenticate to be able to add and see favorite movies\");\n    }\n\n    return () => {\n      _isMounted = false;\n    };\n  }, []);\n\n  async function fetchFavoriteMovies(account_id, session_id) {\n    setLoading(true);\n    let movies = await getFavoriteMovies(account_id, session_id);\n    setLoading(false);\n    setCurrentMovies(movies.results);\n  }\n\n  ;\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"List of Favorite Movies\")), __jsx(\"div\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, loading ? __jsx(EmptyItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 31\n    }\n  }, \"Loading movies from the API...\") : currentMovies.length === 0 ? __jsx(EmptyItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 54\n    }\n  }, favoriteMoviesStatus) : currentMovies.map(movie => {\n    return __jsx(MovieCard, {\n      id: movie.id,\n      poster_path: movie.poster_path,\n      title: movie.title,\n      overview: movie.overview,\n      release_date: movie.release_date,\n      vote_average: movie.vote_average,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 36\n      }\n    });\n  })));\n}\n\nexport default FavoriteMovies;","map":{"version":3,"sources":["/home/mihajlot/movie-app-test/pages/movies/favorite-movies.jsx"],"names":["React","useState","useEffect","Head","Layout","EmptyItem","MovieCard","getFavoriteMovies","FavoriteMovies","_isMounted","loading","setLoading","currentMovies","setCurrentMovies","favoriteMoviesStatus","setFavoriteMoviesStatus","localStorageData","Object","values","localStorage","console","log","access_token","fetchFavoriteMovies","account_id","session_id","movies","results","color","length","map","movie","id","poster_path","title","overview","release_date","vote_average"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;;AAEA,SAASC,cAAT,GAA0B;AACtB,MAAIC,UAAU,GAAG,IAAjB;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACW,aAAD;AAAA,OAAgBC;AAAhB,MAAoCZ,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM;AAAA,OAACa,oBAAD;AAAA,OAAuBC;AAAvB,MAAkDd,QAAQ,CAAC,EAAD,CAAhE;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIc,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAcC,YAAd,CAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,gBAAZ;;AACA,QAAIA,gBAAgB,CAACM,YAArB,EAAmC;AAC/BC,MAAAA,mBAAmB,CAACP,gBAAgB,CAACQ,UAAlB,EAA8BR,gBAAgB,CAACS,UAA/C,CAAnB;AACAV,MAAAA,uBAAuB,CAAC,8BAAD,CAAvB;AACH,KAHD,MAGO;AACHA,MAAAA,uBAAuB,CAAC,oEAAD,CAAvB;AACH;;AACD,WAAO,MAAM;AACTN,MAAAA,UAAU,GAAG,KAAb;AACH,KAFD;AAGH,GAbQ,EAaN,EAbM,CAAT;;AAeA,iBAAec,mBAAf,CAAmCC,UAAnC,EAA+CC,UAA/C,EAA2D;AACvDd,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,QAAIe,MAAM,GAAG,MAAMnB,iBAAiB,CAACiB,UAAD,EAAaC,UAAb,CAApC;AACAd,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,IAAAA,gBAAgB,CAACa,MAAM,CAACC,OAAR,CAAhB;AACH;;AAAA;AAED,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,CADJ,EAII;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQlB,OAAO,GAAG,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAH,GACHE,aAAa,CAACiB,MAAd,KAAyB,CAAzB,GAA6B,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYf,oBAAZ,CAA7B,GAA6EF,aAAa,CAACkB,GAAd,CAAkBC,KAAK,IAAI;AACpG,WAAO,MAAC,SAAD;AACH,MAAA,EAAE,EAAEA,KAAK,CAACC,EADP;AAEH,MAAA,WAAW,EAAED,KAAK,CAACE,WAFhB;AAGH,MAAA,KAAK,EAAEF,KAAK,CAACG,KAHV;AAIH,MAAA,QAAQ,EAAEH,KAAK,CAACI,QAJb;AAKH,MAAA,YAAY,EAAEJ,KAAK,CAACK,YALjB;AAMH,MAAA,YAAY,EAAEL,KAAK,CAACM,YANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAOH,GAR4E,CAHzF,CAJJ,CADJ;AAuBH;;AAED,eAAe7B,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Layout from '../../components/Layout/Layout';\nimport EmptyItem from '../../components/EmptyItem/EmptyItem'\nimport MovieCard from '../../components/MovieCard/MovieCard'\nimport { getFavoriteMovies } from '../../services/movie-service';\n\nfunction FavoriteMovies() {\n    let _isMounted = true;\n    const [loading, setLoading] = useState(false);\n    const [currentMovies, setCurrentMovies] = useState([]);\n    const [favoriteMoviesStatus, setFavoriteMoviesStatus] = useState(\"\");\n\n    useEffect(() => {\n        // TODO: use cookies instead of localstorage \n        let localStorageData = Object.values(localStorage)\n        console.log(localStorageData)\n        if (localStorageData.access_token) {\n            fetchFavoriteMovies(localStorageData.account_id, localStorageData.session_id);\n            setFavoriteMoviesStatus(\"Your favorite list is empty.\")\n        } else {\n            setFavoriteMoviesStatus(\"You need to authenticate to be able to add and see favorite movies\")\n        }\n        return () => {\n            _isMounted = false;\n        }\n    }, [])\n\n    async function fetchFavoriteMovies(account_id, session_id) {\n        setLoading(true);\n        let movies = await getFavoriteMovies(account_id, session_id)\n        setLoading(false);\n        setCurrentMovies(movies.results)\n    };\n\n    return (\n        <Layout>\n            <Head>\n                <title>List of Favorite Movies</title>\n            </Head>\n            <div style={{ color: 'white' }}>\n                {\n                    loading ? <EmptyItem>Loading movies from the API...</EmptyItem> :\n                        currentMovies.length === 0 ? <EmptyItem>{favoriteMoviesStatus}</EmptyItem> : currentMovies.map(movie => {\n                            return <MovieCard\n                                id={movie.id}\n                                poster_path={movie.poster_path}\n                                title={movie.title}\n                                overview={movie.overview}\n                                release_date={movie.release_date}\n                                vote_average={movie.vote_average} />\n                        })\n\n                }\n\n            </div>\n        </Layout>\n    )\n}\n\nexport default FavoriteMovies"]},"metadata":{},"sourceType":"module"}